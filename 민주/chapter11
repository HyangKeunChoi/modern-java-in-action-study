11.1.2 null 때문에 발생하는 문제
- 에러의 근원이다 : NullPointerException은 자바에서 가장 흔히 발생하는 에러이다.
- 코드를 어지럽힌다 : 때로는 중첩된 null 확인 코드를 추가해야 하므로 null 때문에 코드 가독성이 떨어진다.
- 아무 의미가 없다 : null은 아무 의미도 표현하지 않는다. 특히 정적 형식 언어에서 값이 없음을 표현하는 방법으로는 적절하지 않다.
- 자바 철학에 위배된다 : 자바는 개발자로부터 모든 포인터를 숨겼다. 하지만 예외가 있는데 그것이 바로 null 포인터다.
- 형식 시스템에 구멍을 만든다 : null은 무형식이며 정보를 포함하고 있지 않으므로 모든 참조 형식에 null을 할당할 수 있다.
  이런 식으로 null이 할당되기 시작하면서 시스템의 다른 부분으로 null이 퍼졌을 때 애초에 null이 어떤 의미로 사용되었는지 알 수 없다.
  
  
11.2 Optional 클래스 소개
- Optional은 선택형값을 캡슐화하는 클래스다.

11.3.1 Optional 객체 만들기
- Optional을 사용하려면 Optional 객체를 만들어야 한다. 다양한 방법으로 Optional 객체를 만들 수 있다.

빈 Optional
- 정적 팩토리 메서드 Optional.empty로 빈 Optional 객체를 얻을 수 있다.
  Optional<Car> optCar = Optional.empty();

null이 아닌 값으로 Optional 만들기
- 또는 정적 팩토리 메서드 Optional.of로 null이 아닌 값을 포함하는 Optional을 만들 수 있다.
  Optional<Car> optCar = Optional.of(car);
  이제 car가 null이라면 즉시 NullPointerException이 발생한다(Optional을 사용하지 않았다면 car의 프로퍼티에 접근하려 할 때 에러가 발생했을 것이다).

null 값으로 Optional 만들기
- 마지막으로 정적 팩토리 메서드 Optional.ofNullable로 null값을 저장할 수 있는 Optional을 만들 수 있다.
  Optional<Car> optCar = Optional.opfNullable(car);
  car가 null이면 빈 Optional 객체가 반환된다.
  
Optional은 get메서드를 이용해서 값을 가져올 수 있는데 Optional이 비어있으면 get을 호출했을 때 예외가 발생한다.
즉, Optional을 잘못 사용하면 결국 null을 사용했을 때와 같은 문제를 겪을 수 있다.

11.3.2 맵으로 Optional의 값을 추출하고 변환하기
- 보통 객체의 정보를 추출할 때는 Optional을 사용할 때가 많다.
  다음 코드처럼 이름 정보에 접근하기 전에 insurance가 null인지 확인해야 한다.
  
  ```java
   String name = null;
   if(insurance != null) {
       name = insurance.getName();
   }
  ```
  
이런 유형의 패턴에 사용할 수 있도록 Optional은 map 메서드를 지원한다.

Optional<Insurance> optInsurance = Optional.ofNullable(insurance);
Optional<String> name = optInsurance.map(Insurance::getName);
